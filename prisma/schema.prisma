generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String     @id @default(uuid())
  name        String
  username    String     @unique
  pin         String
  role        UserRole @default(CASHIER)
  orders      Order[]
  shifts      Shift[]
  sessions    Session[]
  vouchers    Voucher[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Session {
  id         String     @id @default(uuid())
  userId     String
  user       User       @relation(fields: [userId], references: [id])
  token      String     @unique
  createdAt  DateTime   @default(now())
}

model Customer {
  id          String     @id @default(uuid())
  name        String?
  email       String?    @unique
  orders      Order[]
  vouchers     Voucher[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id          String     @id @default(uuid())
  name        String
  price       Float
  stock       Int
  barcode     String?    @unique
  orderItems  OrderItem[]
  stockHistories StockHistory[]
  voucherItems VoucherItem[]
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Order {
  id          String     @id @default(uuid())
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  sellerId    String
  seller      User       @relation(fields: [sellerId], references: [id])
  shiftId     String?
  shift       Shift?     @relation(fields: [shiftId], references: [id])
  orderItems  OrderItem[]
  vouchers    Voucher[]
  totalAmount Float
  discount    Float      @default(0)
  paymentType PaymentType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  price      Float
  discount   Float    @default(0)
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Voucher {
  id            String     @id @default(uuid())
  voucherNumber String     @unique
  orderId       String?
  order         Order?    @relation(fields: [orderId], references: [id])
  cashierId     String
  cashier       User       @relation(fields: [cashierId], references: [id])
  customerId    String?    
  customer      Customer?  @relation(fields: [customerId], references: [id])
  shiftId     String?
  shift       Shift?     @relation(fields: [shiftId], references: [id])
  totalAmount   Float
  discount      Float      @default(0)
  tax           Float
  finalAmount   Float
  paidAmount    Float
  changeAmount  Float
  paymentMethod PaymentType
  voucherItems  VoucherItem[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model VoucherItem {
  id         String   @id @default(uuid())
  voucherId  String
  voucher    Voucher  @relation(fields: [voucherId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  quantity   Int
  price      Float
  discount   Float    @default(0)
  total      Float
  createdAt  DateTime @default(now())
}


model Shift {
  id          String   @id @default(uuid())
  cashierId   String
  cashier     User     @relation(fields: [cashierId], references: [id])
  startTime   DateTime
  endTime     DateTime?
  startCash   Float
  endCash     Float?
  totalSales  Float    @default(0)
  status      ShiftStatus @default(ONGOING)
  orders      Order[]
  vouchers    Voucher[]
  createdAt   DateTime @default(now())
}

model StockHistory {
  id          String   @id @default(uuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  changeType  StockChangeType
  createdBy   String  
  createdAt   DateTime @default(now())
}

enum StockChangeType {
  ADDED
  SOLD
  ADJUSTED
}

enum PaymentType {
  CASH
  CARD
  MOBILE 
}

enum ShiftStatus {
  ONGOING
  COMPLETED
  CANCELLED
}

enum UserRole {
  ADMIN
  MANAGER
  CASHIER
}
